#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform image2D resultImage;

struct FlattenedNode {
    bool IsLeaf;
    int childIndices[8];
    vec4 color;
};

layout(std430, binding = 1) buffer NodeBuffer {
    FlattenedNode nodes[];
};

uniform vec2 iResolution;
uniform mat4 viewMatrix;
uniform vec3 cameraPos;
uniform float fov;
uniform vec3 minBound;
uniform vec3 maxBound;

const int MAX_DEPTH = 5;
const float MAX_DIST = 50.0;
const float SURFACE_DIST = 0.1;

bool intersectAABB(vec3 ro, vec3 rd, vec3 minB, vec3 maxB) {
    vec3 t1 = (minB - ro) / rd;
    vec3 t2 = (maxB - ro) / rd;
    vec3 tmin = min(t1, t2);
    vec3 tmax = max(t1, t2);
    float tEnter = max(max(tmin.x, tmin.y), tmin.z);
    float tExit = min(min(tmax.x, tmax.y), tmax.z);
    return tEnter <= tExit && tExit > 0.0;
}

//int getChildIndex(vec3 point, vec3 nodePos, float size) {
//    vec3 center = nodePos + vec3(size / 2.0);
//    ivec3 childPos = ivec3(
//        point.x >= center.x ? 1 : 0,
//        point.y >= center.y ? 1 : 0,
 //       point.z >= center.z ? 1 : 0
 //   );
  //  return (childPos.x << 2) | (childPos.y << 1) | childPos.z;
//}

vec4 traverseOctree(vec3 ro, vec3 rd) {
    // First check overall bounds.
    if (!intersectAABB(ro, rd, minBound, maxBound))
        return vec4(0.0, 0.0, 0.0, 1.0);

    int currentIndex = 0;
    vec3 nodePos = minBound;
    float nodeSize = maxBound.x - minBound.x; // assume cubic bounds
    float t = 0.0;
    // Ideally, tExit would be computed from intersectAABB.
    float tExit = MAX_DIST;

    int depth = 0;

    while ( depth <= MAX_DEPTH ) {
        // Each node subdivides into 2 per axis, so each child cell's size is half
        float cellSize = nodeSize * 0.5;

        // Compute position within the current node bounds.
        vec3 localPos = (ro + rd * t) - nodePos;
        // Determine which of the 2x2x2 cells we are in.
        ivec3 cell = ivec3(floor(localPos / cellSize));

        // Compute the next boundary along each axis:
        vec3 nextBoundary;
        for (int i = 0; i < 3; i++) {
            if (rd[i] > 0.0)
                nextBoundary[i] = nodePos[i] + float(cell[i] + 1) * cellSize;
            else
                nextBoundary[i] = nodePos[i] + float(cell[i]) * cellSize;
        }
        // tMax: distance from ro to the next boundary along each axis.
        vec3 tMax = (nextBoundary - ro) / rd;
        // tDelta: how far along the ray we must travel to cross one full cell.
        vec3 tDelta = vec3(cellSize) / abs(rd);

        bool childFound = false;
        while (t < tExit) {
            // Check if cell is within current node's bounds [0, 1]
            if (cell.x < 0 || cell.x > 1 || cell.y < 0 || cell.y > 1 || cell.z < 0 || cell.z > 1) {
                break;
            }

            int childIndex = (cell.x << 2) | (cell.y << 1) | cell.z;
            FlattenedNode node = nodes[currentIndex];
            
            if (node.childIndices[childIndex] != -1) {
                currentIndex = node.childIndices[childIndex];
                nodePos += vec3(cell) * cellSize;
                nodeSize = cellSize;
                depth++;
                childFound = true;
                break;
            }

            // Step to next cell
            vec3 tMaxNext = tMax;
            if (tMax.x < tMax.y && tMax.x < tMax.z) {
                t = tMax.x;
                tMax.x += tDelta.x;
                cell.x += int(sign(rd.x));
            } else if (tMax.y < tMax.z) {
                t = tMax.y;
                tMax.y += tDelta.y;
                cell.y += int(sign(rd.y));
            } else {
                t = tMax.z;
                tMax.z += tDelta.z;
                cell.z += int(sign(rd.z));
            }
        }
        if (!childFound) {
        return vec4(0.0);
        }

        if (childFound) {
        if (nodes[currentIndex].IsLeaf) {
            return nodes[currentIndex].color;
        }
        // Reset for next depth level
        cell = ivec3(0);
        cellSize /= 2.0;
        t = 0.0;
        // Recalculate tMax and tDelta for the new node...
        } 
        else {
        break;
        }
        depth++;
    }


    
    // When a leaf is reached, return its stored color.
    return nodes[currentIndex].color;

}


void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoords.x >= int(iResolution.x) || pixelCoords.y >= int(iResolution.y)) return;

    vec2 uv = (vec2(pixelCoords) / iResolution) * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    vec3 rayDirCameraSpace = normalize(vec3(uv, -1.0 / tan(radians(fov / 2.0))));
    mat3 invViewMatrix = mat3(transpose(viewMatrix));
    vec3 rayDirWorldSpace = normalize(invViewMatrix * rayDirCameraSpace);
    vec3 rayOrigin = cameraPos;

    if (!intersectAABB(rayOrigin, rayDirWorldSpace, minBound, maxBound)) {
        imageStore(resultImage, pixelCoords, vec4(0.0, 0.0, 0.0, 1.0));
        return;
    }

    vec4 color = traverseOctree(rayOrigin, rayDirWorldSpace);
    imageStore(resultImage, pixelCoords, color);
}